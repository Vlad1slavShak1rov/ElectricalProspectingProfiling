// <auto-generated />
using System;
using ElectricalProspectingProfiling.Database.context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElectricalProspectingProfiling.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20250513100847_InitData")]
    partial class InitData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Contract", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("ГеологическиеДанныеID")
                        .HasColumnType("int");

                    b.Property<int>("КлиентID")
                        .HasColumnType("int");

                    b.Property<DateTime>("КонецДата")
                        .HasColumnType("datetime2");

                    b.Property<string>("Контакты")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("НачалоДата")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ПлощадьID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ГеологическиеДанныеID");

                    b.HasIndex("КлиентID");

                    b.HasIndex("ПлощадьID");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.CoordinatsProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("XКоордината")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YКоордината")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("CoordinatsProfile");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.CoordinatsSquare", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("SquareID")
                        .HasColumnType("int");

                    b.Property<decimal>("XКоордината")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("YКоордината")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("SquareID");

                    b.ToTable("CoordinatsSquare");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Имя")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Контакты")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Geodesist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Имя")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Контакты")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Geodesist");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.GeologicalData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ГеодезистID")
                        .HasColumnType("int");

                    b.Property<string>("Загрязнение")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ОписаниеСтруктуры")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ТипПороды")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ГеодезистID");

                    b.ToTable("GeologicalData");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Measurement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Вольтаж")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ГеологическиеДанныеID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Дата")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ДистанцияМеждуЭлектродами")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ПикетыID")
                        .HasColumnType("int");

                    b.Property<double>("Сопротивление")
                        .HasColumnType("float");

                    b.Property<string>("ТипПрофилирования")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Ток")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("ГеологическиеДанныеID");

                    b.HasIndex("ПикетыID")
                        .IsUnique();

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Picket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Дистанция")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Координаты")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Номер")
                        .HasColumnType("int");

                    b.Property<int>("ПрофильID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ПрофильID");

                    b.ToTable("Picket");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Profile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("КоординатыID")
                        .HasColumnType("int");

                    b.Property<string>("МетодПрофилирования")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ПлощадьID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("КоординатыID")
                        .IsUnique();

                    b.HasIndex("ПлощадьID");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Square", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Высота")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Название")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Squares");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Contract", b =>
                {
                    b.HasOne("ElectricalProspectingProfiling.Model.GeologicalData", "GeologicalData")
                        .WithMany()
                        .HasForeignKey("ГеологическиеДанныеID");

                    b.HasOne("ElectricalProspectingProfiling.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("КлиентID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectricalProspectingProfiling.Model.Square", "Square")
                        .WithMany()
                        .HasForeignKey("ПлощадьID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Customer");

                    b.Navigation("GeologicalData");

                    b.Navigation("Square");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.CoordinatsSquare", b =>
                {
                    b.HasOne("ElectricalProspectingProfiling.Model.Square", "Square")
                        .WithMany("CoordinatsSquares")
                        .HasForeignKey("SquareID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Square");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.GeologicalData", b =>
                {
                    b.HasOne("ElectricalProspectingProfiling.Model.Geodesist", "Geodesist")
                        .WithMany()
                        .HasForeignKey("ГеодезистID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Geodesist");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Measurement", b =>
                {
                    b.HasOne("ElectricalProspectingProfiling.Model.GeologicalData", "GeologicalData")
                        .WithMany("Measurements")
                        .HasForeignKey("ГеологическиеДанныеID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectricalProspectingProfiling.Model.Picket", "Picket")
                        .WithOne("Measurement")
                        .HasForeignKey("ElectricalProspectingProfiling.Model.Measurement", "ПикетыID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeologicalData");

                    b.Navigation("Picket");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Picket", b =>
                {
                    b.HasOne("ElectricalProspectingProfiling.Model.Profile", "Profile")
                        .WithMany("Pickets")
                        .HasForeignKey("ПрофильID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Profile", b =>
                {
                    b.HasOne("ElectricalProspectingProfiling.Model.CoordinatsProfile", "CoordinatsProfile")
                        .WithOne("Profile")
                        .HasForeignKey("ElectricalProspectingProfiling.Model.Profile", "КоординатыID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectricalProspectingProfiling.Model.Square", "Square")
                        .WithMany()
                        .HasForeignKey("ПлощадьID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoordinatsProfile");

                    b.Navigation("Square");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.CoordinatsProfile", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.GeologicalData", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Picket", b =>
                {
                    b.Navigation("Measurement")
                        .IsRequired();
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Profile", b =>
                {
                    b.Navigation("Pickets");
                });

            modelBuilder.Entity("ElectricalProspectingProfiling.Model.Square", b =>
                {
                    b.Navigation("CoordinatsSquares");
                });
#pragma warning restore 612, 618
        }
    }
}
